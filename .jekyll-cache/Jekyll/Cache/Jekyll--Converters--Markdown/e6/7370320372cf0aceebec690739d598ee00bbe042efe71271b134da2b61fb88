I"@<p class="notice--info">This series of Data Science posts are my notes for the <a href="https://www.coursera.org/professional-certificates/ibm-data-science">IBM Data Science Professional Certificate</a>.</p>

<h2 id="syllabus">Syllabus</h2>
<p><strong>Week 1 - Introduction to Data Visualization Tools</strong></p>

<ul>
  <li>Introduction to Data Visualization</li>
  <li>Introduction to Matplotlib</li>
  <li>Basic Plotting with Matplotlib</li>
  <li>Dataset on Immigration to Canada</li>
  <li>Line Plots</li>
  <li>Lab: Introduction to Matplotlib and Line Plots</li>
  <li>Quiz: Introduction to Data Visualization Tools</li>
</ul>

<p><strong>Week 2 - Basic and Specialized Visualization Tools</strong></p>

<ul>
  <li>Area Plots</li>
  <li>Histograms</li>
  <li>Bar Charts</li>
  <li>Pie Charts</li>
  <li>Box Plots</li>
  <li>Scatter Plots</li>
  <li>Bubble Plots</li>
  <li>Lab: Basic Visualization Tools</li>
  <li>Lab: Specialized Visualization Tools</li>
  <li>Quiz: Basic Visualization Tools</li>
  <li>Quiz: Specialized Visualization Tools</li>
</ul>

<p><strong>Week 3 - Advanced Visualizations and Geospatial Data</strong></p>

<ul>
  <li>Waffle Charts</li>
  <li>Word Clouds</li>
  <li>Seaborn and Regression Plots</li>
  <li>Introduction to Folium and Map Styles</li>
  <li>Maps with Markers</li>
  <li>Choropleth Maps</li>
  <li>Lab: Advanced Visualization Tools</li>
  <li>Lab: Creating Maps and Visualizing Geospatial Data</li>
  <li>Quiz: Advanced Visualization Tools</li>
  <li>Quiz: Visualizing Geospatial Data</li>
  <li>Peer-review Assignment</li>
</ul>

<h2 id="introduction-to-data-visualization-tools">Introduction to Data Visualization Tools</h2>

<h3 id="why-build-visuals">Why build visuals?</h3>

<ol>
  <li>For exploratory data analysis.</li>
  <li>Communicate data clearly.</li>
  <li>Share unbiased representation of data.</li>
  <li>Use them to support recommendations to different stakeholders.</li>
</ol>

<p><strong>Best Practices:</strong></p>
<ol>
  <li>Less is more effective</li>
  <li>Less is more attractive</li>
  <li>Less is more impactive</li>
</ol>

<p><img src="/media/15840177862454/15840184852684.jpg" alt="-600" width="600px" /></p>

<p>More examples: www.darkhorseanalytics.com</p>

<h2 id="documentation-of-matplotlib">Documentation of Matplotlib</h2>

<p>Created by John Hunter.</p>

<h3 id="3-layers">3 Layers</h3>
<ul>
  <li>Backend layer</li>
  <li>Artist Layer</li>
  <li>Scripting layer</li>
</ul>

<p>Further Reading: www.aosabook.org/en/matplotlib.html</p>

<p><a href="http://www.aosabook.org/en/intro2.html#hunter-john">John Hunter</a> and <a href="http://www.aosabook.org/en/index.html#droettboom-michael">Michael Droettboom</a></p>

<p>matplotlib is a Python-based plotting library with full support for 2D and limited support for 3D graphics, widely used in the Python scientific computing community. The library targets a broad range of use cases. It can embed graphics in the user interface toolkit of your choice, and currently supports interactive graphics on all major desktop operating systems using the GTK+, Qt, Tk, FLTK, wxWidgets and Cocoa toolkits. It can be called interactively from the interactive Python shell to produce graphics with simple, procedural commands, much like Mathematica, IDL or MATLAB. matplotlib can also be embedded in a headless webserver to provide hardcopy in both raster-based formats like Portable Network Graphics (PNG) and vector formats like PostScript, Portable Document Format (PDF) and Scalable Vector Graphics (SVG) that look great on paper.</p>

<h3 id="111-the-dongle-problem">11.1. The Dongle Problem</h3>

<p>matplotlib’s origin dates to an attempt by one of us (John Hunter) to free himself and his fellow epilepsy researchers from a proprietary software package for doing electrocorticography (ECoG) analysis. The laboratory in which he worked had only one license for the software, and the various graduate students, medical students, postdocs, interns, and investigators took turns sharing the hardware key dongle. MATLAB is widely used in the biomedical community for data analysis and visualization, so Hunter set out, with some success, to replace the proprietary software with a MATLAB-based version that could be utilized and extended by multiple investigators. MATLAB, however, naturally views the world as an array of floating point numbers, and the complexities of real-world hospital records for epilepsy surgery patients with multiple data modalities (CT, MRI, ECoG, EEG) warehoused on different servers pushed MATLAB to its limits as a data management system. Unsatisfied with the suitability of MATLAB for this task, Hunter began working on a new Python application built on top of the user interface toolkit GTK+, which was at the time the leading desktop windowing system for Linux.</p>

<p>matplotlib was thus originally developed as an EEG/ECoG visualization tool for this GTK+ application, and this use case directed its original architecture. matplotlib was originally designed to serve a second purpose as well: as a replacement for interactive command-driven graphics generation, something that MATLAB does very well. The MATLAB design makes the simple task of loading a data file and plotting very straightforward, where a full object-oriented API would be too syntactically heavy. So matplotlib also provides a stateful scripting interface for quick and easy generation of graphics similar to MATLAB’s. Because matplotlib is a library, users have access to all of the rich built-in Python data structures such as lists, dictionaries, sets and more.</p>

<h3 id="112-overview-of-matplotlib-architecture">11.2. Overview of matplotlib Architecture</h3>

<p>The top-level matplotlib object that contains and manages all of the elements in a given graphic is called the <code class="language-plaintext highlighter-rouge">Figure</code>. One of the core architectural tasks matplotlib must solve is implementing a framework for representing and manipulating the <code class="language-plaintext highlighter-rouge">Figure</code> that is segregated from the act of rendering the <code class="language-plaintext highlighter-rouge">Figure</code> to a user interface window or hardcopy. This enables us to build increasingly sophisticated features and logic into the <code class="language-plaintext highlighter-rouge">Figure</code>s, while keeping the “backends”, or output devices, relatively simple. matplotlib encapsulates not just the drawing interfaces to allow rendering to multiple devices, but also the basic event handling and windowing of most popular user interface toolkits. Because of this, users can create fairly rich interactive graphics and toolkits incorporating mouse and keyboard input that can be plugged without modification into the six user interface toolkits we support.</p>

<p>The architecture to accomplish this is logically separated into three layers, which can be viewed as a stack. Each layer that sits above another layer knows how to talk to the layer below it, but the lower layer is not aware of the layers above it. The three layers from bottom to top are: backend, artist, and scripting.</p>

<h4 id="backend-layer">Backend Layer</h4>

<p>At the bottom of the stack is the <em>backend</em> layer, which provides concrete implementations of the abstract interface classes:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">FigureCanvas</code> encapsulates the concept of a surface to draw onto (e.g. “the paper”).</li>
  <li><code class="language-plaintext highlighter-rouge">Renderer</code> does the drawing (e.g. “the paintbrush”).</li>
  <li><code class="language-plaintext highlighter-rouge">Event</code> handles user inputs such as keyboard and mouse events.</li>
</ul>

<p>The matplotlib <code class="language-plaintext highlighter-rouge">Event</code> framework maps underlying UI events like <code class="language-plaintext highlighter-rouge">key-press-event</code> or <code class="language-plaintext highlighter-rouge">mouse-motion-event</code> to the matplotlib classes <code class="language-plaintext highlighter-rouge">KeyEvent</code> or <code class="language-plaintext highlighter-rouge">MouseEvent</code>. Users can connect to these events to callback functions and interact with their figure and data; for example, to <code class="language-plaintext highlighter-rouge">pick</code> a data point or group of points, or manipulate some aspect of the figure or its constituents. The following code sample illustrates how to toggle all of the lines in an <code class="language-plaintext highlighter-rouge">Axes</code> window when the user types `t’.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">def</span> <span class="nf">on_press</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">inaxes</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">event</span><span class="p">.</span><span class="n">inaxes</span><span class="p">.</span><span class="n">lines</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="o">==</span><span class="s">'t'</span><span class="p">:</span>
            <span class="n">visible</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">get_visible</span><span class="p">()</span>
            <span class="n">line</span><span class="p">.</span><span class="n">set_visible</span><span class="p">(</span><span class="ow">not</span> <span class="n">visible</span><span class="p">)</span>
    <span class="n">event</span><span class="p">.</span><span class="n">inaxes</span><span class="p">.</span><span class="n">figure</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">draw</span><span class="p">()</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">mpl_connect</span><span class="p">(</span><span class="s">'key_press_event'</span><span class="p">,</span> <span class="n">on_press</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The abstraction of the underlying UI toolkit’s event framework allows both matplotlib developers and end-users to write UI event-handling code in a “write once run everywhere” fashion. For example, the interactive panning and zooming of matplotlib figures that works across all user interface toolkits is implemented in the matplotlib event framework.</p>

<h4 id="artist-layer">Artist Layer</h4>

<p>The <code class="language-plaintext highlighter-rouge">Artist</code> hierarchy is the middle layer of the matplotlib stack, and is the place where much of the heavy lifting happens. Continuing with the analogy that the <code class="language-plaintext highlighter-rouge">FigureCanvas</code> from the backend is the paper, the <code class="language-plaintext highlighter-rouge">Artist</code> is the object that knows how to take the <code class="language-plaintext highlighter-rouge">Renderer</code> (the paintbrush) and put ink on the canvas. Everything you see in a matplotlib <code class="language-plaintext highlighter-rouge">Figure</code> is an <code class="language-plaintext highlighter-rouge">Artist</code> instance; the title, the lines, the tick labels, the images, and so on all correspond to individual <code class="language-plaintext highlighter-rouge">Artist</code> instances (see <a href="http://www.aosabook.org/en/matplotlib.html#fig.matplotlib.artiststree">Figure 11.3</a>). The base class is <code class="language-plaintext highlighter-rouge">matplotlib.artist.Artist</code>, which contains attributes that every <code class="language-plaintext highlighter-rouge">Artist</code> shares: the transformation which translates the artist coordinate system to the canvas coordinate system (discussed in more detail below), the visibility, the clip box which defines the region the artist can paint into, the label, and the interface to handle user interaction such as “picking”; that is, detecting when a mouse click happens over the artist.</p>

<p><img src="/assets/images/images_for_post/artists_figure.png" alt="img" width="500px" /></p>

<p>Figure 11.2: A figure</p>

<p><img src="/assets/images/images_for_post/artists_tree.png" alt="img" width="500px" /></p>

<p>Figure 11.3: The hierarchy of artist instances used to draw <a href="http://www.aosabook.org/en/matplotlib.html#fig.matplotlib.artistsfigure">Figure 11.2</a>.</p>

<p>The coupling between the <code class="language-plaintext highlighter-rouge">Artist</code> hierarchy and the backend happens in the <code class="language-plaintext highlighter-rouge">draw</code> method. For example, in the mockup class below where we create <code class="language-plaintext highlighter-rouge">SomeArtist</code> which subclasses <code class="language-plaintext highlighter-rouge">Artist</code>, the essential method that <code class="language-plaintext highlighter-rouge">SomeArtist</code> must implement is <code class="language-plaintext highlighter-rouge">draw</code>, which is passed a renderer from the backend. The <code class="language-plaintext highlighter-rouge">Artist</code> doesn’t know what kind of backend the renderer is going to draw onto (PDF, SVG, GTK+ DrawingArea, etc.) but it does know the <code class="language-plaintext highlighter-rouge">Renderer</code> API and will call the appropriate method (<code class="language-plaintext highlighter-rouge">draw_text</code> or <code class="language-plaintext highlighter-rouge">draw_path</code>). Since the <code class="language-plaintext highlighter-rouge">Renderer</code> has a pointer to its canvas and knows how to paint onto it, the <code class="language-plaintext highlighter-rouge">draw</code> method transforms the abstract representation of the <code class="language-plaintext highlighter-rouge">Artist</code> to colors in a pixel buffer, paths in an SVG file, or any other concrete representation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">SomeArtist</span><span class="p">(</span><span class="n">Artist</span><span class="p">):</span>
    <span class="s">'An example Artist that implements the draw method'</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
        <span class="s">"""Call the appropriate renderer methods to paint self onto canvas"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_visible</span><span class="p">():</span>  <span class="k">return</span>

        <span class="c1"># create some objects and use renderer to draw self here
</span>        <span class="n">renderer</span><span class="p">.</span><span class="n">draw_path</span><span class="p">(</span><span class="n">graphics_context</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">transform</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>There are two types of <code class="language-plaintext highlighter-rouge">Artist</code>s in the hierarchy. <em>Primitive</em> artists represent the kinds of objects you see in a plot: <code class="language-plaintext highlighter-rouge">Line2D</code>, <code class="language-plaintext highlighter-rouge">Rectangle</code>, <code class="language-plaintext highlighter-rouge">Circle</code>, and <code class="language-plaintext highlighter-rouge">Text</code>. <em>Composite</em> artists are collections of <code class="language-plaintext highlighter-rouge">Artist</code>s such as the <code class="language-plaintext highlighter-rouge">Axis</code>, <code class="language-plaintext highlighter-rouge">Tick</code>, <code class="language-plaintext highlighter-rouge">Axes</code>, and <code class="language-plaintext highlighter-rouge">Figure</code>. Each composite artist may contain other composite artists as well as primitive artists. For example, the <code class="language-plaintext highlighter-rouge">Figure</code> contains one or more composite <code class="language-plaintext highlighter-rouge">Axes</code> and the background of the <code class="language-plaintext highlighter-rouge">Figure</code> is a primitive <code class="language-plaintext highlighter-rouge">Rectangle</code>.</p>

<p>The most important composite artist is the <code class="language-plaintext highlighter-rouge">Axes</code>, which is where most of the matplotlib API plotting methods are defined. Not only does the <code class="language-plaintext highlighter-rouge">Axes</code> contain most of the graphical elements that make up the background of the plot—the ticks, the axis lines, the grid, the patch of color which is the plot background—it contains numerous helper methods that create primitive artists and add them to the <code class="language-plaintext highlighter-rouge">Axes</code> instance. For example, <a href="http://www.aosabook.org/en/matplotlib.html#tbl.matplotlib.axmethods">Table 11.1</a> shows a small sampling of <code class="language-plaintext highlighter-rouge">Axes</code> methods that create plot objects and store them in the <code class="language-plaintext highlighter-rouge">Axes</code> instance.</p>

<p>Table 11.1: Sampling of <code class="language-plaintext highlighter-rouge">Axes</code> methods and the <code class="language-plaintext highlighter-rouge">Artist</code> instances they create</p>

<table>
  <thead>
    <tr>
      <th><strong>method</strong></th>
      <th><strong>creates</strong></th>
      <th><strong>stored in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Axes.imshow</code></td>
      <td>one or more <code class="language-plaintext highlighter-rouge">matplotlib.image.AxesImage</code>s</td>
      <td><code class="language-plaintext highlighter-rouge">Axes.images</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Axes.hist</code></td>
      <td>many <code class="language-plaintext highlighter-rouge">matplotlib.patch.Rectangle</code>s</td>
      <td><code class="language-plaintext highlighter-rouge">Axes.patches</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Axes.plot</code></td>
      <td>one or more <code class="language-plaintext highlighter-rouge">matplotlib.lines.Line2D</code>s</td>
      <td><code class="language-plaintext highlighter-rouge">Axes.lines</code></td>
    </tr>
  </tbody>
</table>

<p>Below is a simple Python script illustrating the architecture above. It defines the backend, connects a <code class="language-plaintext highlighter-rouge">Figure</code> to it, uses the array library <code class="language-plaintext highlighter-rouge">numpy</code> to create 10,000 normally distributed random numbers, and plots a histogram of these.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1"># Import the FigureCanvas from the backend of your choice
#  and attach the Figure artist to it.
</span><span class="kn">from</span> <span class="nn">matplotlib.backends.backend_agg</span> <span class="kn">import</span> <span class="n">FigureCanvasAgg</span> <span class="k">as</span> <span class="n">FigureCanvas</span>
<span class="kn">from</span> <span class="nn">matplotlib.figure</span> <span class="kn">import</span> <span class="n">Figure</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">Figure</span><span class="p">()</span>
<span class="n">canvas</span> <span class="o">=</span> <span class="n">FigureCanvas</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>

<span class="c1"># Import the numpy library to generate the random numbers.
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>

<span class="c1"># Now use a figure method to create an Axes artist; the Axes artist is
#  added automatically to the figure container fig.axes.
# Here "111" is from the MATLAB convention: create a grid with 1 row and 1
#  column, and use the first cell in that grid for the location of the new
#  Axes.
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="c1"># Call the Axes method hist to generate the histogram; hist creates a
#  sequence of Rectangle artists for each histogram bar and adds them
#  to the Axes container.  Here "100" means create 100 bins.
</span><span class="n">ax</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1"># Decorate the figure with a title and save it.
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Normal distribution with $\mu=0, \sigma=1$'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'matplotlib_histogram.png'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="scripting-layer-pyplot">Scripting Layer (pyplot)</h4>

<p>The script using the API above works very well, especially for programmers, and is usually the appropriate programming paradigm when writing a web application server, a UI application, or perhaps a script to be shared with other developers. For everyday purposes, particularly for interactive exploratory work by bench scientists who are not professional programmers, it is a bit syntactically heavy. Most special-purpose languages for data analysis and visualization provide a lighter scripting interface to simplify common tasks, and matplotlib does so as well in its <code class="language-plaintext highlighter-rouge">matplotlib.pyplot</code> interface. The same code above, using <code class="language-plaintext highlighter-rouge">pyplot</code>, reads</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">r'Normal distribution with $\mu=0, \sigma=1$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'matplotlib_histogram.png'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/images_for_post/histogram_demo.png" alt="img" width="500px" /></p>

<p><code class="language-plaintext highlighter-rouge">pyplot</code> is a stateful interface that handles much of the boilerplate for creating figures and axes and connecting them to the backend of your choice, and maintains module-level internal data structures representing the current figure and axes to which to direct plotting commands.</p>

<p>Let’s dissect the important lines in the script to see how this internal state is managed.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">import matplotlib.pyplot as plt</code>: When the <code class="language-plaintext highlighter-rouge">pyplot</code> module is loaded, it parses a local configuration file in which the user states, among many other things, their preference for a default backend. This might be a user interface backend like <code class="language-plaintext highlighter-rouge">QtAgg</code>, in which case the script above will import the GUI framework and launch a Qt window with the plot embedded, or it might be a pure image backend like <code class="language-plaintext highlighter-rouge">Agg</code>, in which case the script will generate the hard-copy output and exit.</li>
  <li><code class="language-plaintext highlighter-rouge">plt.hist(x, 100)</code>: This is the first plotting command in the script. <code class="language-plaintext highlighter-rouge">pyplot</code> will check its internal data structures to see if there is a current <code class="language-plaintext highlighter-rouge">Figure</code> instance. If so, it will extract the current <code class="language-plaintext highlighter-rouge">Axes</code> and direct plotting to the <code class="language-plaintext highlighter-rouge">Axes.hist</code> API call. In this case there is none, so it will create a <code class="language-plaintext highlighter-rouge">Figure</code> and <code class="language-plaintext highlighter-rouge">Axes</code>, set these as current, and direct the plotting to <code class="language-plaintext highlighter-rouge">Axes.hist</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">plt.title(r'Normal distribution with $\mu=0, \sigma=1$')</code>: As above, pyplot will look to see if there is a current <code class="language-plaintext highlighter-rouge">Figure</code> and <code class="language-plaintext highlighter-rouge">Axes</code>. Finding that there is, it will not create new instances but will direct the call to the existing <code class="language-plaintext highlighter-rouge">Axes</code> instance method <code class="language-plaintext highlighter-rouge">Axes.set_title</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">plt.show()</code>: This will force the <code class="language-plaintext highlighter-rouge">Figure</code> to render, and if the user has indicated a default GUI backend in their configuration file, will start the GUI mainloop and raise any figures created to the screen.</li>
</ul>

<p>A somewhat stripped-down and simplified version of <code class="language-plaintext highlighter-rouge">pyplot</code>’s frequently used line plotting function <code class="language-plaintext highlighter-rouge">matplotlib.pyplot.plot</code> is shown below to illustrate how a pyplot function wraps functionality in matplotlib’s object-oriented core. All other <code class="language-plaintext highlighter-rouge">pyplot</code> scripting interface functions follow the same design.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="o">@</span><span class="n">autogen_docstring</span><span class="p">(</span><span class="n">Axes</span><span class="p">.</span><span class="n">plot</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">gca</span><span class="p">()</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">draw_if_interactive</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">ret</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="basic-plotting-with-matplotlib">Basic Plotting with Matplotlib</h2>
<h3 id="plot-function">Plot Function</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="s">'o'</span><span class="p">)</span>
<span class="n">plot</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>But After we plot.show(), we cannot make adjustment to the figure. We can solve this limitation by adding a magic function:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="o">%</span><span class="n">matplotlib</span> <span class="n">notebook</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="s">'o'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>


<span class="c1"># new block
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"hah"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pandas">Pandas</h3>
<p>Pandas also has a built-in implementation of it. Therefore, plotting in pandas is as simple as calling the plot function on a given pandas series or dataframe.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="o">%</span><span class="n">matplotlib</span> <span class="n">notebook</span>
<span class="n">df</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'line'</span><span class="p">)</span>

<span class="n">df</span><span class="p">[</span><span class="s">'col1'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'hist'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="lab">Lab</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
</pre></td><td class="rouge-code"><pre><span class="n">df_can</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s">'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx'</span><span class="p">,</span>
                       <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Canada by Citizenship'</span><span class="p">,</span>
                       <span class="n">skiprows</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
                       <span class="n">skipfooter</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>


<span class="c1"># Note: The default type of index and columns is NOT list.
</span><span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">df_can</span><span class="p">.</span><span class="n">index</span><span class="p">))</span>
<span class="c1">#&lt;class 'pandas.core.indexes.base.Index'&gt;
#&lt;class 'pandas.core.indexes.range.RangeIndex'&gt;
</span>
<span class="c1"># To get the index and columns as lists, we can use the tolist() method.
</span>
<span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">df_can</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">tolist</span><span class="p">()</span>

<span class="k">print</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="n">tolist</span><span class="p">()))</span>
<span class="k">print</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">df_can</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">tolist</span><span class="p">()))</span>

<span class="c1"># view the shape
</span><span class="n">df_can</span><span class="p">.</span><span class="n">shape</span>

<span class="n">df_can</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'AREA'</span><span class="p">,</span><span class="s">'REG'</span><span class="p">,</span><span class="s">'DEV'</span><span class="p">,</span><span class="s">'Type'</span><span class="p">,</span><span class="s">'Coverage'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_can</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># rename
</span><span class="n">df_can</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'OdName'</span><span class="p">:</span><span class="s">'Country'</span><span class="p">,</span> <span class="s">'AreaName'</span><span class="p">:</span><span class="s">'Continent'</span><span class="p">,</span> <span class="s">'RegName'</span><span class="p">:</span><span class="s">'Region'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_can</span><span class="p">.</span><span class="n">columns</span>

<span class="c1"># add a total column
</span><span class="n">df_can</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>


<span class="c1"># set_index
</span><span class="n">df_can</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'Country'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># remove the index name
</span><span class="n">df_can</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="bp">None</span>
<span class="c1"># transpose
</span><span class="n">df</span><span class="p">.</span><span class="n">T</span>
<span class="c1"># convert the type of columns
</span><span class="n">df_can</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>
<span class="p">[</span><span class="k">print</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="n">values</span><span class="p">]</span>


<span class="c1"># matplotlib
# we are using the inline backend
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="k">print</span> <span class="p">(</span><span class="s">'Matplotlib version: '</span><span class="p">,</span> <span class="n">mpl</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">available</span><span class="p">)</span>
<span class="c1"># optional: apply a style to Matplotlib.
</span><span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">([</span><span class="s">'ggplot'</span><span class="p">])</span> <span class="c1"># optional: for ggplot-like style
</span>
<span class="c1"># line plots
</span><span class="n">haiti</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'Haiti'</span><span class="p">,</span> <span class="n">years</span><span class="p">]</span>
<span class="n">haiti</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">haiti</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>

<span class="c1"># add label
</span><span class="n">haiti</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">haiti</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># let's change the index values of Haiti to type integer for plotting
</span><span class="n">haiti</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'line'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Immigration from Haiti'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of immigrants'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span> <span class="c1"># need this line to show the updates made to the figure
</span>
<span class="c1"># add text at specified position
</span><span class="n">haiti</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'line'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Immigration from Haiti'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>

<span class="c1"># annotate the 2010 Earthquake.
# syntax: plt.text(x, y, label)
</span><span class="n">plt</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="s">'2010 Earthquake'</span><span class="p">)</span> <span class="c1"># see note below
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Other Plots</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">bar</code> for vertical bar plots</li>
  <li><code class="language-plaintext highlighter-rouge">barh</code> for horizontal bar plots</li>
  <li><code class="language-plaintext highlighter-rouge">hist</code> for histogram</li>
  <li><code class="language-plaintext highlighter-rouge">box</code> for boxplot</li>
  <li><code class="language-plaintext highlighter-rouge">kde</code> or <code class="language-plaintext highlighter-rouge">density</code> for density plots</li>
  <li><code class="language-plaintext highlighter-rouge">area</code> for area plots</li>
  <li><code class="language-plaintext highlighter-rouge">pie</code> for pie plots</li>
  <li><code class="language-plaintext highlighter-rouge">scatter</code> for scatter plots</li>
  <li><code class="language-plaintext highlighter-rouge">hexbin</code> for hexbin plot</li>
</ul>

<h2 id="basic-visualization-tools">Basic Visualization Tools</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="c1"># Area plot
</span><span class="n">df</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'area'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'ddd'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'dddf'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'xxx'</span><span class="p">)</span>


<span class="c1"># Histgram
## A histogram is a way of representing the frequency distribution of a variable.
</span>
<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1">## Manually ajust the xticks
</span><span class="n">count</span><span class="p">,</span><span class="n">bin_edges</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="s">'col'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'hist'</span><span class="p">,</span><span class="n">xticks</span><span class="o">=</span><span class="n">bin_edges</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># Bar Charts
</span><span class="n">years</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="nb">range</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span><span class="mi">2014</span><span class="p">)))</span>

<span class="n">df_2land</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'iceland'</span><span class="p">,</span><span class="s">'finland'</span><span class="p">],</span><span class="n">years</span><span class="p">]</span>
<span class="n">df_2land</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="lab-1">Lab-1</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="c1"># let's examine the types of the column labels
</span><span class="nb">all</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>

<span class="n">df_can</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>

<span class="c1"># let's check the column labels types now
</span><span class="nb">all</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>

<span class="c1">#set the country name as index
</span><span class="n">df_can</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'Country'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># add total column
</span><span class="n">df_can</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># finally, let's create a list of years from 1980 - 2013
</span><span class="n">years</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span> <span class="mi">2014</span><span class="p">)))</span>

<span class="c1"># Area Plots
</span><span class="n">df_can</span><span class="p">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s">'Total'</span><span class="p">],</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">df_top5</span> <span class="o">=</span> <span class="n">df_top5</span><span class="p">[</span><span class="n">years</span><span class="p">].</span><span class="n">transpose</span><span class="p">()</span>

<span class="n">df_top5</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">df_top5</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># let's change the index values of df_top5 to type integer for plotting
</span><span class="n">df_top5</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'area'</span><span class="p">,</span>
             <span class="n">stacked</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
             <span class="n">alpha</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="c1"># 0-1, default value a= 0.5
</span>             <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="c1"># pass a tuple (x, y) size
</span>             <span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Immigration Trend of Top 5 Countries'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="two-types-of-plotting">Two types of plotting</h4>
<p>As we discussed in the video lectures, there are two styles/options of ploting with matplotlib. Plotting using the Artist layer and plotting using the scripting layer.</p>

<p><strong>Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as ‘plt’</strong></p>

<p>You can use <code class="language-plaintext highlighter-rouge">plt</code> i.e. <code class="language-plaintext highlighter-rouge">matplotlib.pyplot</code> and add more elements by calling different methods procedurally; for example, <code class="language-plaintext highlighter-rouge">plt.title(...)</code> to add title or <code class="language-plaintext highlighter-rouge">plt.xlabel(...)</code> to add label to the x-axis.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>    <span class="c1"># Option 1: This is what we have been using so far
</span>    <span class="n">df_top5</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'area'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.35</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Immigration trend of top 5 countries'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of immigrants'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Option 2: Artist layer (Object oriented method) - using an <code class="language-plaintext highlighter-rouge">Axes</code> instance from Matplotlib (preferred)</strong></p>

<p>You can use an <code class="language-plaintext highlighter-rouge">Axes</code> instance of your current plot and store it in a variable (eg. <code class="language-plaintext highlighter-rouge">ax</code>). You can add more elements by calling methods with a little change in syntax (by adding “<em>set_</em>” to the previous methods). For example, use <code class="language-plaintext highlighter-rouge">ax.set_title()</code> instead of <code class="language-plaintext highlighter-rouge">plt.title()</code> to add title,  or <code class="language-plaintext highlighter-rouge">ax.set_xlabel()</code> instead of <code class="language-plaintext highlighter-rouge">plt.xlabel()</code> to add label to the x-axis.</p>

<p>This option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).</p>

<p>In this course, we will stick to the <strong>scripting layer</strong>, except for some advanced visualizations where we will need to use the <strong>artist layer</strong> to manipulate advanced aspects of the plots.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1"># option 2: preferred option with more flexibility
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">df_top5</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'area'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.35</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Immigration Trend of Top 5 Countries'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<p>Note:</p>
<ul>
  <li>By default, the area plot is stacked, i.e <code class="language-plaintext highlighter-rouge">stacked=True</code></li>
  <li>The plot will plot each column as a line. If necessary, we might need to transpose the dataframe by df.T or df.transpose().</li>
</ul>

<h4 id="histograme">Histograme</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1"># np.histogram returns 2 values
</span><span class="n">count</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df_can</span><span class="p">[</span><span class="s">'2013'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="c1"># frequency count
</span><span class="k">print</span><span class="p">(</span><span class="n">bin_edges</span><span class="p">)</span> <span class="c1"># bin ranges, default = 10 bins
</span>
<span class="n">df_can</span><span class="p">[</span><span class="s">'2013'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'hist'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Histogram of Immigration from 195 Countries in 2013'</span><span class="p">)</span> <span class="c1"># add a title to the histogram
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Countries'</span><span class="p">)</span> <span class="c1"># add y-label
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span> <span class="c1"># add x-label
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/media/15840177862454/15841600196607.jpg" alt="-w550" width="600px" /></p>

<p>In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population.</p>

<p>Notice that the x-axis labels do not match with the bin size. This can be fixed by passing in a <code class="language-plaintext highlighter-rouge">xticks</code> keyword that contains the list of the bin sizes, as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1"># 'bin_edges' is a list of bin intervals
</span><span class="n">count</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df_can</span><span class="p">[</span><span class="s">'2013'</span><span class="p">])</span>

<span class="c1"># by defualt bins=10
</span><span class="n">df_can</span><span class="p">[</span><span class="s">'2013'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'hist'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">xticks</span><span class="o">=</span><span class="n">bin_edges</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Histogram of Immigration from 195 countries in 2013'</span><span class="p">)</span> <span class="c1"># add a title to the histogram
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Countries'</span><span class="p">)</span> <span class="c1"># add y-label
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span> <span class="c1"># add x-label
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>What if we have more than one column and bins&gt;10?
Let’s make a few modifications to improve the impact and aesthetics of the previous plot:</p>

<ul>
  <li>increase the bin size to 15 by passing in bins parameter</li>
  <li>set transparency to 60% by passing in alpha paramemter</li>
  <li>label the x-axis by passing in x-label paramater</li>
  <li>change the colors of the plots by passing in color paramete</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1"># transpose dataframe
</span><span class="n">df_t</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'Denmark'</span><span class="p">,</span> <span class="s">'Norway'</span><span class="p">,</span> <span class="s">'Sweden'</span><span class="p">],</span> <span class="n">years</span><span class="p">].</span><span class="n">transpose</span><span class="p">()</span>
<span class="n">df_t</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="c1"># let's get the x-tick values
</span><span class="n">count</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df_t</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>

<span class="c1"># un-stacked histogram
</span><span class="n">df_t</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span><span class="s">'hist'</span><span class="p">,</span>
          <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
          <span class="n">bins</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
          <span class="n">alpha</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
          <span class="n">xticks</span><span class="o">=</span><span class="n">bin_edges</span><span class="p">,</span>
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s">'coral'</span><span class="p">,</span> <span class="s">'darkslateblue'</span><span class="p">,</span> <span class="s">'mediumseagreen'</span><span class="p">]</span>
         <span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Years'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If we do no want the plots to overlap each other, we can stack them using the stacked paramemter. Let’s also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the xlim paramater, as show below</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="n">count</span><span class="p">,</span> <span class="n">bin_edges</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">df_t</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">xmin</span> <span class="o">=</span> <span class="n">bin_edges</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">10</span>   <span class="c1">#  first bin value is 31.0, adding buffer of 10 for aesthetic purposes
</span><span class="n">xmax</span> <span class="o">=</span> <span class="n">bin_edges</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">10</span>  <span class="c1">#  last bin value is 308.0, adding buffer of 10 for aesthetic purposes
</span>
<span class="c1"># stacked Histogram
</span><span class="n">df_t</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'hist'</span><span class="p">,</span>
          <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
          <span class="n">bins</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
          <span class="n">xticks</span><span class="o">=</span><span class="n">bin_edges</span><span class="p">,</span>
          <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="s">'coral'</span><span class="p">,</span> <span class="s">'darkslateblue'</span><span class="p">,</span> <span class="s">'mediumseagreen'</span><span class="p">],</span>
          <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
          <span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">)</span>
         <span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Years'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="bar-charts">Bar Charts</h4>
<p>A bar plot is a way of representing data where the <em>length</em> of the bars represents the magnitude/size of the feature/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals.</p>

<p>To create a bar plot, we can pass one of two arguments via <code class="language-plaintext highlighter-rouge">kind</code> parameter in <code class="language-plaintext highlighter-rouge">plot()</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kind=bar</code> creates a <em>vertical</em> bar plot</li>
  <li><code class="language-plaintext highlighter-rouge">kind=barh</code> creates a <em>horizontal</em> bar plot</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1"># step 1: get the data
</span><span class="n">df_iceland</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'Iceland'</span><span class="p">,</span> <span class="n">years</span><span class="p">]</span>
<span class="n">df_iceland</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="c1"># step 2: plot data
</span><span class="n">df_iceland</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">)</span> <span class="c1"># add to x-label to the plot
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of immigrants'</span><span class="p">)</span> <span class="c1"># add y-label to the plot
</span><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Icelandic immigrants to Canada from 1980 to 2013'</span><span class="p">)</span> <span class="c1"># add title to the plot
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/media/15840177862454/15841608829801.jpg" alt="-w624" width="600px" /></p>

<p>The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008.</p>

<p>Let’s annotate this on the plot using the <code class="language-plaintext highlighter-rouge">annotate</code> method of the <strong>scripting layer</strong> or the <strong>pyplot interface</strong>. We will pass in the following parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">s</code>: str, the text of annotation.</li>
  <li><code class="language-plaintext highlighter-rouge">xy</code>: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).</li>
  <li><code class="language-plaintext highlighter-rouge">xytext</code>: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).</li>
  <li><code class="language-plaintext highlighter-rouge">xycoords</code>: The coordinate system that xy is given in - ‘data’ uses the coordinate system of the object being annotated (default).</li>
  <li><code class="language-plaintext highlighter-rouge">arrowprops</code>: Takes a dictionary of properties to draw the arrow:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">arrowstyle</code>: Specifies the arrow style, <code class="language-plaintext highlighter-rouge">'-&gt;'</code> is standard arrow.</li>
      <li><code class="language-plaintext highlighter-rouge">connectionstyle</code>: Specifies the connection type. <code class="language-plaintext highlighter-rouge">arc3</code> is a straight line.</li>
      <li><code class="language-plaintext highlighter-rouge">color</code>: Specifes color of arror.</li>
      <li><code class="language-plaintext highlighter-rouge">lw</code>: Specifies the line width.</li>
    </ul>
  </li>
</ul>

<p>Let’s also annotate a text to go over the arrow.  We will pass in the following additional parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rotation</code>: rotation angle of text in degrees (counter clockwise)</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">va</code>: vertical alignment of text [‘center’</td>
          <td>‘top’</td>
          <td>‘bottom’</td>
          <td>‘baseline’]</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">ha</code>: horizontal alignment of text [‘center’</td>
          <td>‘right’</td>
          <td>‘left’]</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>I encourage you to read the Matplotlib documentation for more details on annotations:
http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="n">df_iceland</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">rot</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Icelandic Immigrants to Canada from 1980 to 2013'</span><span class="p">)</span>

<span class="c1"># Annotate arrow
</span><span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">''</span><span class="p">,</span>                      <span class="c1"># s: str. will leave it blank for no text
</span>             <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>             <span class="c1"># place head of the arrow at point (year 2012 , pop 70)
</span>             <span class="n">xytext</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>         <span class="c1"># place base of the arrow at point (year 2008 , pop 20)
</span>             <span class="n">xycoords</span><span class="o">=</span><span class="s">'data'</span><span class="p">,</span>         <span class="c1"># will use the coordinate system of the object being annotated
</span>             <span class="n">arrowprops</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">arrowstyle</span><span class="o">=</span><span class="s">'-&gt;'</span><span class="p">,</span> <span class="n">connectionstyle</span><span class="o">=</span><span class="s">'arc3'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">)</span>

<span class="c1"># Annotate Text
</span><span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'2008 - 2011 Financial Crisis'</span><span class="p">,</span> <span class="c1"># text to display
</span>             <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>                    <span class="c1"># start the text at at point (year 2008 , pop 30)
</span>             <span class="n">rotation</span><span class="o">=</span><span class="mf">72.5</span><span class="p">,</span>                  <span class="c1"># based on trial and error to match the arrow
</span>             <span class="n">va</span><span class="o">=</span><span class="s">'bottom'</span><span class="p">,</span>                    <span class="c1"># want the text to be vertically 'bottom' aligned
</span>             <span class="n">ha</span><span class="o">=</span><span class="s">'left'</span><span class="p">,</span>                      <span class="c1"># want the text to be horizontally 'left' algned.
</span>            <span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Horizontal Bar Plot</strong></p>

<p>Sometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categetorical variables.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="n">df_can</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'Total'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_top15</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">[</span><span class="s">'Total'</span><span class="p">].</span><span class="n">tail</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="n">df_top15</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">'steelblue'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013'</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/media/15840177862454/15841614520531.jpg" alt="-w600" width="600px" /></p>

<p><strong>Add label</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1"># annotate value labels to each country
</span><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df_top15</span><span class="p">):</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nb">format</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="s">','</span><span class="p">)</span> <span class="c1"># format int with commas
</span>
<span class="c1"># place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)
</span>    <span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="n">value</span> <span class="o">-</span> <span class="mi">47000</span><span class="p">,</span> <span class="n">index</span> <span class="o">-</span> <span class="mf">0.10</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">'white'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/media/15840177862454/15841616271898.jpg" alt="-w600" width="600px" /></p>

<h3 id="lab-2">Lab-2</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>  <span class="c1"># useful for many scientific computing in Python
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span> <span class="c1"># primary data structure library
</span>
<span class="n">df_can</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s">'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx'</span><span class="p">,</span>
                       <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Canada by Citizenship'</span><span class="p">,</span>
                       <span class="n">skiprows</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
                       <span class="n">skipfooter</span><span class="o">=</span><span class="mi">2</span>
                      <span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Data downloaded and read into a dataframe!'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Clean Data</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="c1"># clean up the dataset to remove unnecessary columns (eg. REG)
</span><span class="n">df_can</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'AREA'</span><span class="p">,</span> <span class="s">'REG'</span><span class="p">,</span> <span class="s">'DEV'</span><span class="p">,</span> <span class="s">'Type'</span><span class="p">,</span> <span class="s">'Coverage'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># let's rename the columns so that they make sense
</span><span class="n">df_can</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'OdName'</span><span class="p">:</span><span class="s">'Country'</span><span class="p">,</span> <span class="s">'AreaName'</span><span class="p">:</span><span class="s">'Continent'</span><span class="p">,</span><span class="s">'RegName'</span><span class="p">:</span><span class="s">'Region'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># for sake of consistency, let's also make all column labels of type string
</span><span class="n">df_can</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>

<span class="c1"># set the country name as index - useful for quickly looking up countries using .loc method
</span><span class="n">df_can</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'Country'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># add total column
</span><span class="n">df_can</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># years that we will be using in this lesson - useful for plotting later on
</span><span class="n">years</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span> <span class="mi">2014</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'data dimensions:'</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Visualization</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'ggplot'</span><span class="p">)</span> <span class="c1"># optional: for ggplot-like style
</span>
<span class="c1"># check for latest version of Matplotlib
</span><span class="k">print</span><span class="p">(</span><span class="s">'Matplotlib version: '</span><span class="p">,</span> <span class="n">mpl</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span> <span class="c1"># &gt;= 2.0.0
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="pie-charts">Pie Charts</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1"># group countries by continents and apply sum() function
</span><span class="n">df_continents</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'Continent'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span>

<span class="c1"># note: the output of the groupby method is a `groupby' object.
# we can not use it further until we apply a function (eg .sum())
</span><span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">df_can</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'Continent'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)))</span>
<span class="n">df_continents</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Step 2: Plot the data. We will pass in <code class="language-plaintext highlighter-rouge">kind = 'pie'</code> keyword, along with the following additional parameters:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">autopct</code> -  is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be <code class="language-plaintext highlighter-rouge">fmt%pct</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">startangle</code> - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.</li>
  <li><code class="language-plaintext highlighter-rouge">shadow</code> - Draws a shadow beneath the pie (to give a 3D feel).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1"># autopct create %, start angle represent starting point
</span><span class="n">df_continents</span><span class="p">[</span><span class="s">'Total'</span><span class="p">].</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'pie'</span><span class="p">,</span>
                            <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
                            <span class="n">autopct</span><span class="o">=</span><span class="s">'%1.1f%%'</span><span class="p">,</span> <span class="c1"># add in percentages
</span>                            <span class="n">startangle</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span>     <span class="c1"># start angle 90° (Africa)
</span>                            <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>       <span class="c1"># add shadow
</span>                            <span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Immigration to Canada by Continent [1980 - 2013]'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'equal'</span><span class="p">)</span> <span class="c1"># Sets the pie chart to look like a circle.
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/media/15840177862454/15841634820161.jpg" alt="-w500" width="600px" /></p>

<p>The above visual is not very clear, the numbers and text overlap in some instances. Let’s make a few modifications to improve the visuals:</p>

<ul>
  <li>Remove the text labels on the pie chart by passing in <code class="language-plaintext highlighter-rouge">legend</code> and add it as a seperate legend using <code class="language-plaintext highlighter-rouge">plt.legend()</code>.</li>
  <li>Push out the percentages to sit just outside the pie chart by passing in <code class="language-plaintext highlighter-rouge">pctdistance</code> parameter.</li>
  <li>Pass in a custom set of colors for continents by passing in <code class="language-plaintext highlighter-rouge">colors</code> parameter.</li>
  <li><strong>Explode</strong> the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Carribbean) by pasing in <code class="language-plaintext highlighter-rouge">explode</code> parameter.</li>
</ul>

<h4 id="box-plots">Box Plots</h4>

<p>A <code class="language-plaintext highlighter-rouge">box plot</code> is a way of statistically representing the <em>distribution</em> of the data through five main dimensions:</p>

<ul>
  <li><strong>Minimun:</strong> Smallest number in the dataset.</li>
  <li><strong>First quartile:</strong> Middle number between the <code class="language-plaintext highlighter-rouge">minimum</code> and the <code class="language-plaintext highlighter-rouge">median</code>.</li>
  <li><strong>Second quartile (Median):</strong> Middle number of the (sorted) dataset.</li>
  <li><strong>Third quartile:</strong> Middle number between <code class="language-plaintext highlighter-rouge">median</code> and <code class="language-plaintext highlighter-rouge">maximum</code>.</li>
  <li><strong>Maximum:</strong> Highest number in the dataset.</li>
</ul>

<p><img src="/media/15840177862454/15841636866087.jpg" alt="-w500" width="600px" /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1"># to get a dataframe, place extra square brackets around 'Japan'.
</span><span class="n">df_japan</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'Japan,China'</span><span class="p">],</span> <span class="n">years</span><span class="p">].</span><span class="n">transpose</span><span class="p">()</span>
<span class="n">df_japan</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">df_japan</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'box'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Box plot of Japanese Immigrants from 1980 - 2013'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="subplots">Subplots</h4>

<p>Often times we might want to plot multiple plots within the same figure. For example, we might want to perform a side by side comparison of the box plot with the line plot of China and India’s immigration.</p>

<p>To visualize multiple plots together, we can create a <strong><code class="language-plaintext highlighter-rouge">figure</code></strong> (overall canvas) and divide it into <strong><code class="language-plaintext highlighter-rouge">subplots</code></strong>, each containing a plot. With <strong>subplots</strong>, we usually work with the <strong>artist layer</strong> instead of the <strong>scripting layer</strong>.</p>

<p>Typical syntax is : <br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span> <span class="c1"># create figure
</span>    <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="n">nrows</span><span class="p">,</span> <span class="n">ncols</span><span class="p">,</span> <span class="n">plot_number</span><span class="p">)</span> <span class="c1"># create subplots
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>Where</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">nrows</code> and <code class="language-plaintext highlighter-rouge">ncols</code> are used to notionally split the figure into (<code class="language-plaintext highlighter-rouge">nrows</code> * <code class="language-plaintext highlighter-rouge">ncols</code>) sub-axes,</li>
  <li><code class="language-plaintext highlighter-rouge">plot_number</code> is used to identify the particular subplot that this function is to create within the notional grid. <code class="language-plaintext highlighter-rouge">plot_number</code> starts at 1, increments across rows first and has a maximum of <code class="language-plaintext highlighter-rouge">nrows</code> * <code class="language-plaintext highlighter-rouge">ncols</code> as shown below.</li>
</ul>

<p><img src="/media/15840177862454/15841638648872.jpg" alt="-w500" width="600px" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span> <span class="c1"># create figure
</span>
<span class="n">ax0</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># add subplot 1 (1 row, 2 columns, first plot)
</span><span class="n">ax1</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># add subplot 2 (1 row, 2 columns, second plot). See tip below**
</span>
<span class="c1"># Subplot 1: Box plot
</span><span class="n">df_CI</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'box'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span> <span class="n">vert</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax0</span><span class="p">)</span> <span class="c1"># add to subplot 1
</span><span class="n">ax0</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Box Plots of Immigrants from China and India (1980 - 2013)'</span><span class="p">)</span>
<span class="n">ax0</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">ax0</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Countries'</span><span class="p">)</span>

<span class="c1"># Subplot 2: Line plot
</span><span class="n">df_CI</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'line'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span> <span class="c1"># add to subplot 2
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_title</span> <span class="p">(</span><span class="s">'Line Plots of Immigrants from China and India (1980 - 2013)'</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Years'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/media/15840177862454/15841639706201.jpg" alt="-w800" width="600px" /></p>

<p>In the case when nrows, ncols, and plot_number are all less than 10, a convenience exists such that the a 3 digit number can be given instead, where the hundreds represent nrows, the tens represent ncols and the units represent plot_number. For instance,</p>

<p>subplot(211) == subplot(2, 1, 1)</p>

<p>produces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 rows by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">df_top15</span><span class="o">=</span><span class="n">df_can</span><span class="p">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s">'Total'</span><span class="p">],</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
<span class="n">df_top15</span>

<span class="n">years_80s</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span> <span class="mi">1990</span><span class="p">)))</span>
<span class="n">years_90s</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)))</span>
<span class="n">years_00s</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">2010</span><span class="p">)))</span>

<span class="n">df_80s</span><span class="o">=</span><span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">years_80s</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_90s</span><span class="o">=</span><span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">years_90s</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_00s</span><span class="o">=</span><span class="n">df_can</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="n">years_00s</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">new_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'1980s'</span><span class="p">:</span> <span class="n">df_80s</span><span class="p">,</span> <span class="s">'1990s'</span><span class="p">:</span> <span class="n">df_90s</span><span class="p">,</span> <span class="s">'2000s'</span><span class="p">:</span><span class="n">df_00s</span><span class="p">})</span>

<span class="n">new_df</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'box'</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="scatter-plot-and-regression">Scatter Plot and Regression</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="c1"># we can use the sum() method to get the total population per year
</span><span class="n">df_tot</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df_can</span><span class="p">[</span><span class="n">years</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="c1"># change the years to type int (useful for regression later on)
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">df_tot</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>

<span class="c1"># reset the index to put in back in as a column in the df_tot dataframe
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># rename columns
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'year'</span><span class="p">,</span> <span class="s">'total'</span><span class="p">]</span>

<span class="c1"># view the final dataframe
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="n">df_tot</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'scatter'</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">'darkblue'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Total Immigration to Canada from 1980 - 2013'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># regression
</span><span class="n">x</span> <span class="o">=</span> <span class="n">df_tot</span><span class="p">[</span><span class="s">'year'</span><span class="p">]</span>      <span class="c1"># year on x-axis
</span><span class="n">y</span> <span class="o">=</span> <span class="n">df_tot</span><span class="p">[</span><span class="s">'total'</span><span class="p">]</span>     <span class="c1"># total on y-axis
</span><span class="n">fit</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">polyfit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">deg</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">p</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">poly1d</span><span class="p">(</span><span class="n">fit</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="c1"># plot the regression
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'scatter'</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">'darkblue'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Total Immigration to Canada from 1980 - 2013'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>

<span class="c1"># plot line of best fit
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">)</span> <span class="c1"># recall that x is the Years
</span><span class="n">plt</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'y={0:.0f} x + {1:.0f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">fit</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fit</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">150000</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># print out the line of best fit
</span><span class="s">'No. Immigrants = {0:.0f} * Year + {1:.0f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">fit</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fit</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="bubble-plots">Bubble Plots</h4>
<p>A <code class="language-plaintext highlighter-rouge">bubble plot</code> is a variation of the <code class="language-plaintext highlighter-rouge">scatter plot</code> that displays three dimensions of data (x, y, z). The datapoints are replaced with bubbles, and the size of the bubble is determined by the third variable ‘z’, also known as the weight. In <code class="language-plaintext highlighter-rouge">maplotlib</code>, we can pass in an array or scalar to the keyword <code class="language-plaintext highlighter-rouge">s</code> to <code class="language-plaintext highlighter-rouge">plot()</code>, that contains the weight of each point.</p>

<p><strong>Let’s start by analyzing the effect of Argentina’s great depression</strong>.</p>

<p>Argentina suffered a great depression from 1998 - 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country’s foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002.</p>

<p>Let’s analyze the effect of this crisis, and compare Argentina’s immigration to that of it’s neighbour Brazil. Let’s do that using a <code class="language-plaintext highlighter-rouge">bubble plot</code> of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the <em>normalized</em> value of the population for each year.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="n">df_can_t</span> <span class="o">=</span> <span class="n">df_can</span><span class="p">[</span><span class="n">years</span><span class="p">].</span><span class="n">transpose</span><span class="p">()</span> <span class="c1"># transposed dataframe
</span>
<span class="c1"># cast the Years (the index) to type int
</span><span class="n">df_can_t</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">df_can_t</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>

<span class="c1"># let's label the index. This will automatically be the column name when we reset the index
</span><span class="n">df_can_t</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">'Year'</span>

<span class="c1"># reset index to bring the Year in as a column
</span><span class="n">df_can_t</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># view the changes
</span><span class="n">df_can_t</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="c1"># normalize Brazil data
</span><span class="n">norm_brazil</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_can_t</span><span class="p">[</span><span class="s">'Brazil'</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_can_t</span><span class="p">[</span><span class="s">'Brazil'</span><span class="p">].</span><span class="nb">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">df_can_t</span><span class="p">[</span><span class="s">'Brazil'</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">df_can_t</span><span class="p">[</span><span class="s">'Brazil'</span><span class="p">].</span><span class="nb">min</span><span class="p">())</span>

<span class="c1"># normalize Argentina data
</span><span class="n">norm_argentina</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_can_t</span><span class="p">[</span><span class="s">'Argentina'</span><span class="p">]</span> <span class="o">-</span> <span class="n">df_can_t</span><span class="p">[</span><span class="s">'Argentina'</span><span class="p">].</span><span class="nb">min</span><span class="p">())</span> <span class="o">/</span> <span class="p">(</span><span class="n">df_can_t</span><span class="p">[</span><span class="s">'Argentina'</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span> <span class="o">-</span> <span class="n">df_can_t</span><span class="p">[</span><span class="s">'Argentina'</span><span class="p">].</span><span class="nb">min</span><span class="p">())</span>

<span class="c1"># Brazil
</span><span class="n">ax0</span> <span class="o">=</span> <span class="n">df_can_t</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'scatter'</span><span class="p">,</span>
                    <span class="n">x</span><span class="o">=</span><span class="s">'Year'</span><span class="p">,</span>
                    <span class="n">y</span><span class="o">=</span><span class="s">'Brazil'</span><span class="p">,</span>
                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
                    <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>                  <span class="c1"># transparency
</span>                    <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span>
                    <span class="n">s</span><span class="o">=</span><span class="n">norm_brazil</span> <span class="o">*</span> <span class="mi">2000</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span>  <span class="c1"># pass in weights
</span>                    <span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="mi">1975</span><span class="p">,</span> <span class="mi">2015</span><span class="p">)</span>
                   <span class="p">)</span>

<span class="c1"># Argentina
</span><span class="n">ax1</span> <span class="o">=</span> <span class="n">df_can_t</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'scatter'</span><span class="p">,</span>
                    <span class="n">x</span><span class="o">=</span><span class="s">'Year'</span><span class="p">,</span>
                    <span class="n">y</span><span class="o">=</span><span class="s">'Argentina'</span><span class="p">,</span>
                    <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
                    <span class="n">color</span><span class="o">=</span><span class="s">"blue"</span><span class="p">,</span>
                    <span class="n">s</span><span class="o">=</span><span class="n">norm_argentina</span> <span class="o">*</span> <span class="mi">2000</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span>
                    <span class="n">ax</span> <span class="o">=</span> <span class="n">ax0</span>
                   <span class="p">)</span>

<span class="n">ax0</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Number of Immigrants'</span><span class="p">)</span>
<span class="n">ax0</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Immigration from Brazil and Argentina from 1980 - 2013'</span><span class="p">)</span>
<span class="n">ax0</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">'Brazil'</span><span class="p">,</span> <span class="s">'Argentina'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="s">'x-large'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/media/15840177862454/15841650700174.jpg" alt="-w800" width="600px" /></p>

<h2 id="advanced-visualization">Advanced Visualization</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>  <span class="c1"># useful for many scientific computing in Python
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span> <span class="c1"># primary data structure library
</span><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span> <span class="c1"># converting images into arrays
</span>

<span class="n">df_can</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s">'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx'</span><span class="p">,</span>
                       <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Canada by Citizenship'</span><span class="p">,</span>
                       <span class="n">skiprows</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
                       <span class="n">skipfooter</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Data downloaded and read into a dataframe!'</span><span class="p">)</span>

<span class="c1"># Data Cleaning
# clean up the dataset to remove unnecessary columns (eg. REG)
</span><span class="n">df_can</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'AREA'</span><span class="p">,</span><span class="s">'REG'</span><span class="p">,</span><span class="s">'DEV'</span><span class="p">,</span><span class="s">'Type'</span><span class="p">,</span><span class="s">'Coverage'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># let's rename the columns so that they make sense
</span><span class="n">df_can</span><span class="p">.</span><span class="n">rename</span> <span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">'OdName'</span><span class="p">:</span><span class="s">'Country'</span><span class="p">,</span> <span class="s">'AreaName'</span><span class="p">:</span><span class="s">'Continent'</span><span class="p">,</span><span class="s">'RegName'</span><span class="p">:</span><span class="s">'Region'</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># for sake of consistency, let's also make all column labels of type string
</span><span class="n">df_can</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">columns</span><span class="p">))</span>

<span class="c1"># set the country name as index - useful for quickly looking up countries using .loc method
</span><span class="n">df_can</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'Country'</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># add total column
</span><span class="n">df_can</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span> <span class="o">=</span>  <span class="n">df_can</span><span class="p">.</span><span class="nb">sum</span> <span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># years that we will be using in this lesson - useful for plotting later on
</span><span class="n">years</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1980</span><span class="p">,</span> <span class="mi">2014</span><span class="p">)))</span>
<span class="k">print</span> <span class="p">(</span><span class="s">'data dimensions:'</span><span class="p">,</span> <span class="n">df_can</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib.patches</span> <span class="k">as</span> <span class="n">mpatches</span> <span class="c1"># needed for waffle Charts
</span>
<span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'ggplot'</span><span class="p">)</span> <span class="c1"># optional: for ggplot-like style
</span>
<span class="c1"># check for latest version of Matplotlib
</span><span class="k">print</span> <span class="p">(</span><span class="s">'Matplotlib version: '</span><span class="p">,</span> <span class="n">mpl</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span> <span class="c1"># &gt;= 2.0.0
</span></pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="waffel-charts">Waffel Charts</h3>
<p>The easiest way to create a waffle chart in Python is using the Python package, PyWaffle.</p>

<p><strong>Step 1.</strong> The first step into creating a waffle chart is determing the proportion of each category with respect to the total.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1"># compute the proportion of each category with respect to the total
</span><span class="n">total_values</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">df_dsn</span><span class="p">[</span><span class="s">'Total'</span><span class="p">])</span>
<span class="n">category_proportions</span> <span class="o">=</span> <span class="p">[(</span><span class="nb">float</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">/</span> <span class="n">total_values</span><span class="p">)</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">df_dsn</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]]</span>

<span class="c1"># print out proportions
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">proportion</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">category_proportions</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s">': '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">proportion</span><span class="p">))</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Step 2.</strong> The second step is defining the overall size of the <code class="language-plaintext highlighter-rouge">waffle</code> chart.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">width</span> <span class="o">=</span> <span class="mi">40</span> <span class="c1"># width of chart
</span><span class="n">height</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1"># height of chart
</span>
<span class="n">total_num_tiles</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="c1"># total number of tiles
</span>
<span class="k">print</span> <span class="p">(</span><span class="s">'Total number of tiles is '</span><span class="p">,</span> <span class="n">total_num_tiles</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Step 3.</strong> The third step is using the proportion of each category to determe it respective number of tiles</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1"># compute the number of tiles for each catagory
</span><span class="n">tiles_per_category</span> <span class="o">=</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">proportion</span> <span class="o">*</span> <span class="n">total_num_tiles</span><span class="p">)</span> <span class="k">for</span> <span class="n">proportion</span> <span class="ow">in</span> <span class="n">category_proportions</span><span class="p">]</span>

<span class="c1"># print out number of tiles per category
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tiles</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">tiles_per_category</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s">': '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">tiles</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Step 4.</strong> The fourth step is creating a matrix that resembles the <code class="language-plaintext highlighter-rouge">waffle</code> chart and populating it.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1"># initialize the waffle chart as an empty matrix
</span><span class="n">waffle_chart</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">))</span>

<span class="c1"># define indices to loop through waffle chart
</span><span class="n">category_index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">tile_index</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># populate the waffle chart
</span><span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
        <span class="n">tile_index</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># if the number of tiles populated for the current category is equal to its corresponding allocated tiles...
</span>        <span class="k">if</span> <span class="n">tile_index</span> <span class="o">&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="n">tiles_per_category</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">category_index</span><span class="p">]):</span>
            <span class="c1"># ...proceed to the next category
</span>            <span class="n">category_index</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># set the class value to an integer, which increases with class
</span>        <span class="n">waffle_chart</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">category_index</span>

<span class="k">print</span> <span class="p">(</span><span class="s">'Waffle chart populated!'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="rouge-code"><pre><span class="c1"># instantiate a new figure object
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="c1"># use matshow to display the waffle chart
</span><span class="n">colormap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">coolwarm</span>
<span class="n">plt</span><span class="p">.</span><span class="n">matshow</span><span class="p">(</span><span class="n">waffle_chart</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">colormap</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>

<span class="c1"># instantiate a new figure object
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="c1"># use matshow to display the waffle chart
</span><span class="n">colormap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">coolwarm</span>
<span class="n">plt</span><span class="p">.</span><span class="n">matshow</span><span class="p">(</span><span class="n">waffle_chart</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">colormap</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>

<span class="c1"># get the axis
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

<span class="c1"># set minor ticks
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">width</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">height</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># add gridlines based on minor ticks
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="n">which</span><span class="o">=</span><span class="s">'minor'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'w'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'-'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">([])</span>


<span class="c1"># instantiate a new figure object
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="c1"># use matshow to display the waffle chart
</span><span class="n">colormap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">coolwarm</span>
<span class="n">plt</span><span class="p">.</span><span class="n">matshow</span><span class="p">(</span><span class="n">waffle_chart</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">colormap</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>

<span class="c1"># get the axis
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

<span class="c1"># set minor ticks
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">width</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">height</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># add gridlines based on minor ticks
</span><span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="n">which</span><span class="o">=</span><span class="s">'minor'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'w'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'-'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">([])</span>

<span class="c1"># compute cumulative sum of individual categories to match color schemes between chart and legend
</span><span class="n">values_cumsum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">df_dsn</span><span class="p">[</span><span class="s">'Total'</span><span class="p">])</span>
<span class="n">total_values</span> <span class="o">=</span> <span class="n">values_cumsum</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">values_cumsum</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>

<span class="c1"># create legend
</span><span class="n">legend_handles</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">category</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span><span class="p">):</span>
    <span class="n">label_str</span> <span class="o">=</span> <span class="n">category</span> <span class="o">+</span> <span class="s">' ('</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">df_dsn</span><span class="p">[</span><span class="s">'Total'</span><span class="p">][</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="s">')'</span>
    <span class="n">color_val</span> <span class="o">=</span> <span class="n">colormap</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">values_cumsum</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">/</span><span class="n">total_values</span><span class="p">)</span>
    <span class="n">legend_handles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">mpatches</span><span class="p">.</span><span class="n">Patch</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">color_val</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">label_str</span><span class="p">))</span>

<span class="c1"># add legend to chart
</span><span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">handles</span><span class="o">=</span><span class="n">legend_handles</span><span class="p">,</span>
           <span class="n">loc</span><span class="o">=</span><span class="s">'lower center'</span><span class="p">,</span>
           <span class="n">ncol</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span><span class="p">),</span>
           <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">,</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span>
          <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now it would very inefficient to repeat these seven steps every time we wish to create a <code class="language-plaintext highlighter-rouge">waffle</code> chart. So let’s combine all seven steps into one function called <em>create_waffle_chart</em>. This function would take the following parameters as input:</p>

<blockquote>
  <ol>
    <li><strong>categories</strong>: Unique categories or classes in dataframe.</li>
    <li><strong>values</strong>: Values corresponding to categories or classes.</li>
    <li><strong>height</strong>: Defined height of waffle chart.</li>
    <li><strong>width</strong>: Defined width of waffle chart.</li>
    <li><strong>colormap</strong>: Colormap class</li>
    <li><strong>value_sign</strong>: In order to make our function more generalizable, we will add this parameter to address signs that could be associated with a value such as %, $, and so on. <strong>value_sign</strong> has a default value of empty string.</li>
  </ol>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">create_waffle_chart</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">colormap</span><span class="p">,</span> <span class="n">value_sign</span><span class="o">=</span><span class="s">''</span><span class="p">):</span>

    <span class="c1"># compute the proportion of each category with respect to the total
</span>    <span class="n">total_values</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
    <span class="n">category_proportions</span> <span class="o">=</span> <span class="p">[(</span><span class="nb">float</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">/</span> <span class="n">total_values</span><span class="p">)</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">values</span><span class="p">]</span>

    <span class="c1"># compute the total number of tiles
</span>    <span class="n">total_num_tiles</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="c1"># total number of tiles
</span>    <span class="k">print</span> <span class="p">(</span><span class="s">'Total number of tiles is'</span><span class="p">,</span> <span class="n">total_num_tiles</span><span class="p">)</span>

    <span class="c1"># compute the number of tiles for each catagory
</span>    <span class="n">tiles_per_category</span> <span class="o">=</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">proportion</span> <span class="o">*</span> <span class="n">total_num_tiles</span><span class="p">)</span> <span class="k">for</span> <span class="n">proportion</span> <span class="ow">in</span> <span class="n">category_proportions</span><span class="p">]</span>

    <span class="c1"># print out number of tiles per category
</span>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tiles</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">tiles_per_category</span><span class="p">):</span>
        <span class="k">print</span> <span class="p">(</span><span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s">': '</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">tiles</span><span class="p">))</span>

    <span class="c1"># initialize the waffle chart as an empty matrix
</span>    <span class="n">waffle_chart</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">))</span>

    <span class="c1"># define indices to loop through waffle chart
</span>    <span class="n">category_index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">tile_index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># populate the waffle chart
</span>    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
            <span class="n">tile_index</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="c1"># if the number of tiles populated for the current category
</span>            <span class="c1"># is equal to its corresponding allocated tiles...
</span>            <span class="k">if</span> <span class="n">tile_index</span> <span class="o">&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="n">tiles_per_category</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">category_index</span><span class="p">]):</span>
                <span class="c1"># ...proceed to the next category
</span>                <span class="n">category_index</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="c1"># set the class value to an integer, which increases with class
</span>            <span class="n">waffle_chart</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">category_index</span>

    <span class="c1"># instantiate a new figure object
</span>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

    <span class="c1"># use matshow to display the waffle chart
</span>    <span class="n">colormap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">coolwarm</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">matshow</span><span class="p">(</span><span class="n">waffle_chart</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">colormap</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">()</span>

    <span class="c1"># get the axis
</span>    <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>

    <span class="c1"># set minor ticks
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">width</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">height</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">minor</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># add dridlines based on minor ticks
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="n">which</span><span class="o">=</span><span class="s">'minor'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'w'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'-'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">yticks</span><span class="p">([])</span>

    <span class="c1"># compute cumulative sum of individual categories to match color schemes between chart and legend
</span>    <span class="n">values_cumsum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
    <span class="n">total_values</span> <span class="o">=</span> <span class="n">values_cumsum</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">values_cumsum</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>

    <span class="c1"># create legend
</span>    <span class="n">legend_handles</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">category</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">categories</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">value_sign</span> <span class="o">==</span> <span class="s">'%'</span><span class="p">:</span>
            <span class="n">label_str</span> <span class="o">=</span> <span class="n">category</span> <span class="o">+</span> <span class="s">' ('</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="n">value_sign</span> <span class="o">+</span> <span class="s">')'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">label_str</span> <span class="o">=</span> <span class="n">category</span> <span class="o">+</span> <span class="s">' ('</span> <span class="o">+</span> <span class="n">value_sign</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="s">')'</span>

        <span class="n">color_val</span> <span class="o">=</span> <span class="n">colormap</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">values_cumsum</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">/</span><span class="n">total_values</span><span class="p">)</span>
        <span class="n">legend_handles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">mpatches</span><span class="p">.</span><span class="n">Patch</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">color_val</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">label_str</span><span class="p">))</span>

    <span class="c1"># add legend to chart
</span>    <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span>
        <span class="n">handles</span><span class="o">=</span><span class="n">legend_handles</span><span class="p">,</span>
        <span class="n">loc</span><span class="o">=</span><span class="s">'lower center'</span><span class="p">,</span>
        <span class="n">ncol</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">categories</span><span class="p">),</span>
        <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">,</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now to create a waffle chart:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="n">width</span> <span class="o">=</span> <span class="mi">40</span> <span class="c1"># width of chart
</span><span class="n">height</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1"># height of chart
</span>
<span class="n">categories</span> <span class="o">=</span> <span class="n">df_dsn</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">values</span> <span class="c1"># categories
</span><span class="n">values</span> <span class="o">=</span> <span class="n">df_dsn</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span> <span class="c1"># correponding values of categories
</span>
<span class="n">colormap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">coolwarm</span> <span class="c1"># color map class
</span>
<span class="n">create_waffle_chart</span><span class="p">(</span><span class="n">categories</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">colormap</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="word-clouds">Word Clouds</h3>
<h3 id="seaborn-and-regressin-plots">Seaborn and Regressin Plots</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="c1"># install seaborn
# !conda install -c anaconda seaborn --yes
</span>
<span class="c1"># import library
</span><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Seaborn installed and imported!'</span><span class="p">)</span>

<span class="c1"># we can use the sum() method to get the total population per year
</span><span class="n">df_tot</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">df_can</span><span class="p">[</span><span class="n">years</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>

<span class="c1"># change the years to type float (useful for regression later on)
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span> <span class="n">df_tot</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>

<span class="c1"># reset the index to put in back in as a column in the df_tot dataframe
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># rename columns
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'year'</span><span class="p">,</span> <span class="s">'total'</span><span class="p">]</span>

<span class="c1"># view the final dataframe
</span><span class="n">df_tot</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_tot</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_tot</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_tot</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'+'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_tot</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="n">scatter_kws</span><span class="o">=</span><span class="p">{</span><span class="s">'s'</span><span class="p">:</span> <span class="mi">200</span><span class="p">})</span>

<span class="n">ax</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s">'Year'</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">'Total Immigration'</span><span class="p">)</span> <span class="c1"># add x- and y-labels
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Total Immigration to Canada from 1980 - 2013'</span><span class="p">)</span> <span class="c1"># add title
</span>

<span class="c1"># And finally increase the font size of the tickmark labels, the title, and the x- and y-labels so they don't feel left out!
</span><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

<span class="n">sns</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'total'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_tot</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="n">scatter_kws</span><span class="o">=</span><span class="p">{</span><span class="s">'s'</span><span class="p">:</span> <span class="mi">200</span><span class="p">})</span>
<span class="n">ax</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">xlabel</span><span class="o">=</span><span class="s">'Year'</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">'Total Immigration'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Total Immigration to Canada from 1980 - 2013'</span><span class="p">)</span>

<span class="c1"># can change the background
</span><span class="n">sns</span><span class="p">.</span><span class="n">set_style</span><span class="p">(</span><span class="s">'ticks'</span><span class="p">)</span> <span class="c1"># change background to white background
</span><span class="n">sns</span><span class="p">.</span><span class="n">set_style</span><span class="p">(</span><span class="s">'whitegrid'</span><span class="p">)</span> <span class="c1"># Or to a white background with gridlines.
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="visualizing-geospatial-data">Visualizing Geospatial Data</h2>
<p>In this lab, we will learn how to create maps for different objectives. To do that, we will part ways with Matplotlib and work with another Python visualization library, namely <strong>Folium</strong>. What is nice about Folium is that it was developed for the sole purpose of visualizing geospatial data. While other libraries are available to visualize geospatial data, such as plotly, they might have a cap on how many API calls you can make within a defined time frame. Folium, on the other hand, is completely free.</p>

<h3 id="folium">Folium</h3>
<p>Folium is a powerful Python library that helps you create several types of Leaflet maps. The fact that the Folium results are interactive makes this library very useful for dashboard building.</p>

<p>From the official Folium documentation page:</p>

<blockquote>
  <p>Folium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library. Manipulate your data in Python, then visualize it in on a Leaflet map via Folium.</p>
</blockquote>

<blockquote>
  <p>Folium makes it easy to visualize data that’s been manipulated in Python on an interactive Leaflet map. It enables both the binding of data to a map for choropleth visualizations as well as passing Vincent/Vega visualizations as markers on the map.</p>
</blockquote>

<blockquote>
  <p>The library has a number of built-in tilesets from OpenStreetMap, Mapbox, and Stamen, and supports custom tilesets with Mapbox or Cloudmade API keys. Folium supports both GeoJSON and TopoJSON overlays, as well as the binding of data to those overlays to create choropleth maps with color-brewer color schemes.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1"># define the world map
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">()</span>

<span class="c1"># display world map
</span><span class="n">world_map</span>

<span class="c1"># define the world map centered around Canada with a low zoom level
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="mf">56.130</span><span class="p">,</span> <span class="o">-</span><span class="mf">106.35</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># display world map
</span><span class="n">world_map</span>

<span class="c1"># Create a map of Mexico with a zoom level of 4.
</span>
<span class="n">mexico_latitude</span> <span class="o">=</span> <span class="mf">23.6345</span>
<span class="n">mexico_longitude</span> <span class="o">=</span> <span class="o">-</span><span class="mf">102.5528</span>



<span class="n">mexico_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="n">mexico_latitude</span><span class="p">,</span> <span class="n">mexico_longitude</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">mexico_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="a-stamen-toner-maps">A. Stamen Toner Maps</h4>

<p>These are high-contrast B+W (black and white) maps. They are perfect for data mashups and exploring river meanders and coastal zones.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1"># create a Stamen Toner map of the world centered around Canada
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="mf">56.130</span><span class="p">,</span> <span class="o">-</span><span class="mf">106.35</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">tiles</span><span class="o">=</span><span class="s">'Stamen Toner'</span><span class="p">)</span>

<span class="c1"># display map
</span><span class="n">world_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="b-stamen-terrain-maps">B. Stamen Terrain Maps</h4>

<p>These are maps that feature hill shading and natural vegetation colors. They showcase advanced labeling and linework generalization of dual-carriageway roads.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1"># create a Stamen Toner map of the world centered around Canada
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="mf">56.130</span><span class="p">,</span> <span class="o">-</span><span class="mf">106.35</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">tiles</span><span class="o">=</span><span class="s">'Stamen Terrain'</span><span class="p">)</span>

<span class="c1"># display map
</span><span class="n">world_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="c-mapbox-bright-maps">C. Mapbox Bright Maps</h4>

<p>These are maps that quite similar to the default style, except that the borders are not visible with a low zoom level. Furthermore, unlike the default style where country names are displayed in each country’s native language, <em>Mapbox Bright</em> style displays all country names in English.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1"># create a world map with a Mapbox Bright style.
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">tiles</span><span class="o">=</span><span class="s">'Mapbox Bright'</span><span class="p">)</span>

<span class="c1"># display the map
</span><span class="n">world_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="maps-with-markers">Maps with Markers</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="n">df_incidents</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Police_Department_Incidents_-_Previous_Year__2016_.csv'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Dataset downloaded and read into a pandas dataframe!'</span><span class="p">)</span>


<span class="c1"># San Francisco latitude and longitude values
</span><span class="n">latitude</span> <span class="o">=</span> <span class="mf">37.77</span>
<span class="n">longitude</span> <span class="o">=</span> <span class="o">-</span><span class="mf">122.42</span>

<span class="c1"># create map and display it
</span><span class="n">sanfran_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

<span class="c1"># display the map of San Francisco
</span><span class="n">sanfran_map</span>

<span class="c1"># instantiate a feature group for the incidents in the dataframe
</span><span class="n">incidents</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="nb">map</span><span class="p">.</span><span class="n">FeatureGroup</span><span class="p">()</span>

<span class="c1"># loop through the 100 crimes and add each to the incidents feature group
</span><span class="k">for</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span> <span class="n">df_incidents</span><span class="p">.</span><span class="n">X</span><span class="p">):</span>
    <span class="n">incidents</span><span class="p">.</span><span class="n">add_child</span><span class="p">(</span>
        <span class="n">folium</span><span class="p">.</span><span class="n">features</span><span class="p">.</span><span class="n">CircleMarker</span><span class="p">(</span>
            <span class="p">[</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">],</span>
            <span class="n">radius</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="c1"># define how big you want the circle markers to be
</span>            <span class="n">color</span><span class="o">=</span><span class="s">'yellow'</span><span class="p">,</span>
            <span class="n">fill</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">fill_color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span>
            <span class="n">fill_opacity</span><span class="o">=</span><span class="mf">0.6</span>
        <span class="p">)</span>
    <span class="p">)</span>

<span class="c1"># add pop-up text to each marker on the map
</span><span class="n">latitudes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
<span class="n">longitudes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">X</span><span class="p">)</span>
<span class="n">labels</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">Category</span><span class="p">)</span>

<span class="k">for</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">latitudes</span><span class="p">,</span> <span class="n">longitudes</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>
    <span class="n">folium</span><span class="p">.</span><span class="n">Marker</span><span class="p">([</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">],</span> <span class="n">popup</span><span class="o">=</span><span class="n">label</span><span class="p">).</span><span class="n">add_to</span><span class="p">(</span><span class="n">sanfran_map</span><span class="p">)</span>

<span class="c1"># add incidents to map
</span><span class="n">sanfran_map</span><span class="p">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">incidents</span><span class="p">)</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you find the map to be so congested will all these markers, there are two remedies to this problem. The simpler solution is to remove these location markers and just add the text to the circle markers themselves as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1"># create map and display it
</span><span class="n">sanfran_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

<span class="c1"># loop through the 100 crimes and add each to the map
</span><span class="k">for</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span> <span class="n">df_incidents</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">df_incidents</span><span class="p">.</span><span class="n">Category</span><span class="p">):</span>
    <span class="n">folium</span><span class="p">.</span><span class="n">features</span><span class="p">.</span><span class="n">CircleMarker</span><span class="p">(</span>
        <span class="p">[</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">],</span>
        <span class="n">radius</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="c1"># define how big you want the circle markers to be
</span>        <span class="n">color</span><span class="o">=</span><span class="s">'yellow'</span><span class="p">,</span>
        <span class="n">fill</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">popup</span><span class="o">=</span><span class="n">label</span><span class="p">,</span>
        <span class="n">fill_color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span>
        <span class="n">fill_opacity</span><span class="o">=</span><span class="mf">0.6</span>
    <span class="p">).</span><span class="n">add_to</span><span class="p">(</span><span class="n">sanfran_map</span><span class="p">)</span>

<span class="c1"># show map
</span><span class="n">sanfran_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The other proper remedy is to group the markers into different clusters. Each cluster is then represented by the number of crimes in each neighborhood. These clusters can be thought of as pockets of San Francisco which you can then analyze separately.</p>

<p>To implement this, we start off by instantiating a MarkerCluster object and adding all the data points in the dataframe to this object.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">folium</span> <span class="kn">import</span> <span class="n">plugins</span>

<span class="c1"># let's start again with a clean copy of the map of San Francisco
</span><span class="n">sanfran_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">],</span> <span class="n">zoom_start</span> <span class="o">=</span> <span class="mi">12</span><span class="p">)</span>

<span class="c1"># instantiate a mark cluster object for the incidents in the dataframe
</span><span class="n">incidents</span> <span class="o">=</span> <span class="n">plugins</span><span class="p">.</span><span class="n">MarkerCluster</span><span class="p">().</span><span class="n">add_to</span><span class="p">(</span><span class="n">sanfran_map</span><span class="p">)</span>

<span class="c1"># loop through the dataframe and add each data point to the mark cluster
</span><span class="k">for</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">df_incidents</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span> <span class="n">df_incidents</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">df_incidents</span><span class="p">.</span><span class="n">Category</span><span class="p">):</span>
    <span class="n">folium</span><span class="p">.</span><span class="n">Marker</span><span class="p">(</span>
        <span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="n">lat</span><span class="p">,</span> <span class="n">lng</span><span class="p">],</span>
        <span class="n">icon</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">popup</span><span class="o">=</span><span class="n">label</span><span class="p">,</span>
    <span class="p">).</span><span class="n">add_to</span><span class="p">(</span><span class="n">incidents</span><span class="p">)</span>

<span class="c1"># display map
</span><span class="n">sanfran_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="choropleth-maps">Choropleth Maps</h4>
<p>A <code class="language-plaintext highlighter-rouge">Choropleth</code> map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income. The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. Below is a <code class="language-plaintext highlighter-rouge">Choropleth</code> map of the US depicting the population by square mile per state.
<img src="/media/15840177862454/15841940246417.jpg" alt="-w500" width="600px" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">df_can</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s">'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx'</span><span class="p">,</span>
                     <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Canada by Citizenship'</span><span class="p">,</span>
                     <span class="n">skiprows</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span>
                     <span class="n">skipfooter</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Data downloaded and read into a dataframe!'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>In order to create a Choropleth map, we need a GeoJSON file that defines the areas/boundaries of the state, county, or country that we are interested in. In our case, since we are endeavoring to create a world map, we want a GeoJSON that defines the boundaries of all world countries. For your convenience, we will be providing you with this file, so let’s go ahead and download it. Let’s name it world_countries.json.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1"># download countries geojson file
</span><span class="err">!</span><span class="n">wget</span> <span class="o">--</span><span class="n">quiet</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">s3</span><span class="o">-</span><span class="n">api</span><span class="p">.</span><span class="n">us</span><span class="o">-</span><span class="n">geo</span><span class="p">.</span><span class="n">objectstorage</span><span class="p">.</span><span class="n">softlayer</span><span class="p">.</span><span class="n">net</span><span class="o">/</span><span class="n">cf</span><span class="o">-</span><span class="n">courses</span><span class="o">-</span><span class="n">data</span><span class="o">/</span><span class="n">CognitiveClass</span><span class="o">/</span><span class="n">DV0101EN</span><span class="o">/</span><span class="n">labs</span><span class="o">/</span><span class="n">Data_Files</span><span class="o">/</span><span class="n">world_countries</span><span class="p">.</span><span class="n">json</span> <span class="o">-</span><span class="n">O</span> <span class="n">world_countries</span><span class="p">.</span><span class="n">json</span>

<span class="k">print</span><span class="p">(</span><span class="s">'GeoJSON file downloaded!'</span><span class="p">)</span>

<span class="n">world_geo</span> <span class="o">=</span> <span class="s">r'world_countries.json'</span> <span class="c1"># geojson file
</span>
<span class="c1"># create a plain world map
</span><span class="n">world_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">tiles</span><span class="o">=</span><span class="s">'Mapbox Bright'</span><span class="p">)</span>


<span class="c1"># generate choropleth map using the total immigration of each country to Canada from 1980 to 2013
</span><span class="n">world_map</span><span class="p">.</span><span class="n">choropleth</span><span class="p">(</span>
    <span class="n">geo_data</span><span class="o">=</span><span class="n">world_geo</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df_can</span><span class="p">,</span>
    <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Country'</span><span class="p">,</span> <span class="s">'Total'</span><span class="p">],</span>
    <span class="n">key_on</span><span class="o">=</span><span class="s">'feature.properties.name'</span><span class="p">,</span>
    <span class="n">fill_color</span><span class="o">=</span><span class="s">'YlOrRd'</span><span class="p">,</span>
    <span class="n">fill_opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
    <span class="n">line_opacity</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
    <span class="n">legend_name</span><span class="o">=</span><span class="s">'Immigration to Canada'</span>
<span class="p">)</span>

<span class="c1"># display map
</span><span class="n">world_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="final-assignment">Final Assignment</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># %matplotlib notebook
</span><span class="n">df</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'Topic_Survey_Assignment.csv'</span><span class="p">,</span><span class="n">index_col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">df_survey</span><span class="o">=</span><span class="n">df</span>
<span class="n">df_survey</span>
<span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="s">'ggplot'</span><span class="p">)</span>


<span class="c1"># 1. Sort the dataframe in descending order of Very interested.
</span><span class="n">df_survey</span><span class="p">.</span><span class="n">sort_values</span><span class="p">([</span><span class="s">'Very interested'</span><span class="p">],</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># 2. Convert the numbers into percentages of the total number of respondents.
#    Recall that 2,233 respondents completed the survey.
#    Round percentages to 2 decimal places.
</span><span class="n">df_survey_pct</span> <span class="o">=</span> <span class="p">((</span><span class="n">df_survey</span> <span class="o">/</span> <span class="mi">2233</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">).</span><span class="nb">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">df_survey_pct</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'bar'</span><span class="p">,</span>
                       <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
                       <span class="n">width</span> <span class="o">=</span> <span class="mf">0.8</span><span class="p">,</span>
                       <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="s">'#5cb85c'</span><span class="p">,</span> <span class="s">'#5bc0de'</span><span class="p">,</span> <span class="s">'#d9534f'</span><span class="p">],</span>
                       <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">14</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Percentage of Respondents Interests</span><span class="se">\'</span><span class="s">'' in Data Science Areas'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="c1"># add title to the plot
</span>

<span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">((</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">))</span>

<span class="n">y_axis</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">axes</span><span class="p">.</span><span class="n">get_yaxis</span><span class="p">()</span>
<span class="n">y_axis</span><span class="p">.</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># Solution inspired in https://stackoverflow.com/questions/25447700/annotate-bars-with-values-on-pandas-bar-plots
</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">patches</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">())</span> <span class="o">+</span> <span class="s">'%'</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_x</span><span class="p">()</span> <span class="o">*</span> <span class="mf">1.005</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span> <span class="o">*</span> <span class="mf">1.03</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">df_sfcrime</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"https://cocl.us/sanfran_crime_dataset"</span><span class="p">)</span>

<span class="n">df_tmp</span> <span class="o">=</span> <span class="n">df_sfcrime</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'PdDistrict'</span><span class="p">]).</span><span class="n">count</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">df_tmp</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'Category'</span><span class="p">,</span><span class="s">'Descript'</span><span class="p">,</span><span class="s">'DayOfWeek'</span><span class="p">,</span><span class="s">'Date'</span><span class="p">,</span><span class="s">'Time'</span><span class="p">,</span> <span class="s">'Resolution'</span><span class="p">,</span><span class="s">'Address'</span><span class="p">,</span><span class="s">'X'</span><span class="p">,</span><span class="s">'Y'</span><span class="p">,</span><span class="s">'Location'</span><span class="p">,</span><span class="s">'PdId'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_tmp</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'PdDistrict'</span><span class="p">:</span><span class="s">'Neighborhood'</span><span class="p">,</span> <span class="s">'IncidntNum'</span><span class="p">:</span><span class="s">'Count'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1">#https://cocl.us/sanfran_geojson
</span><span class="err">!</span><span class="n">wget</span> <span class="o">--</span><span class="n">quiet</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">cocl</span><span class="p">.</span><span class="n">us</span><span class="o">/</span><span class="n">sanfran_geojson</span> <span class="o">-</span><span class="n">O</span> <span class="n">sanfrangeo</span><span class="p">.</span><span class="n">json</span>
<span class="k">print</span><span class="p">(</span><span class="s">'GeoJSON file downloaded!'</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">folium</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Folium installed and imported!'</span><span class="p">)</span>

<span class="n">sf_geo</span> <span class="o">=</span> <span class="s">r'sanfran_geo.json'</span> <span class="c1"># geojson file
</span>
<span class="c1"># create a plain San Francisco map
</span><span class="n">sf_map</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="n">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="mf">37.773972</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.431297</span><span class="p">],</span> <span class="n">zoom_start</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span> <span class="c1">#, tiles='Mapbox Bright')
</span><span class="n">sf_map</span><span class="p">.</span><span class="n">choropleth</span><span class="p">(</span>
    <span class="n">geo_data</span><span class="o">=</span><span class="n">sf_geo</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df_tmp</span><span class="p">,</span>
    <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Neighborhood'</span><span class="p">,</span><span class="s">'Count'</span><span class="p">],</span>
    <span class="n">key_on</span><span class="o">=</span><span class="s">'feature.properties.DISTRICT'</span><span class="p">,</span>
    <span class="n">fill_color</span><span class="o">=</span><span class="s">'YlOrRd'</span><span class="p">,</span>
    <span class="n">fill_opacity</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
    <span class="n">line_opacity</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
    <span class="n">legend_name</span><span class="o">=</span><span class="s">'San Francisco Crimes'</span>
<span class="p">)</span>

<span class="c1"># display map
</span><span class="n">sf_map</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET